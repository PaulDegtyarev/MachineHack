---------------------------------------------------------------
Beginner
1. Updation of list items

def updation(list1,N,K):
    return list1[:K] + [N] + list1[K:]
print(updation(list1, N, K))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
3. Add lists and sort

def addition(list1,list2):
    list1.extend(list2)
    return sorted(list1)
print(addition(list1, list2))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
5. Second largest element in the list

def removingDuplicate(list1):
    list1 = sorted(set(list1))
    return list1[-2]
print(removingDuplicate(list1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
6. All the positive numbers

def positiveNumber(K,N):
    list = []
    for i in range(K, N+1):
        if i > 0:
            list.append(i)
    return list
print(positiveNumber(K,N))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
10. Simple interest

def simpleInterest(P,R,T):
    return (P * R * T)/100
print(simpleInterest(P, R, T))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
11. String concatenation

def concatenate(string1,string2,string3):
    s = string1 + ' ' + string2 + ' ' + string3
    size = len(s)
    result = []
    result.append(s)
    result.append(size)
    return result
print(concatenate(s1,s2,s3))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
16. Reverse an array

def ReverseArray(array):
    return array[::-1]
print(ReverseArray(array1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
17. Add elements to the array

def add_a_element(array,K,N):
    return array[:K] + [N] + array[K:]
print(add_a_element(array1,K,N))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
18. Pop array elements

def add_a_element(array,K):
    del array[K]
    return array
print(add_a_element(array1,K))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
19. Concatenate arrays

def sum(array1,array2):
    array = array1 + array2
    s = 0
    for i in range(len(array)):
            s += array[i]
    return s
print(sum(array1,array2))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
20. Sort an array in descending order

def decending_order(array):
    return sorted(array, reverse=True)
print(decending_order(array1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
21. Length of a dictionary

def lengthOfDictionary(dict1):
    return len(dict1)
print(lengthOfDictionary(dict1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
22. Merge dictionaries

# Для Python до 3.9
def mergeDictionary(dict1,dict2):
    return {**dict1, **dict2}
print(mergeDictionary(dict1,dict2))

# Для Python после 3.9
def mergeDictionary(dict1,dict2):
    return dict1 | dict2
print(mergeDictionary(dict1,dict2))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
24. Copying dictionaries

def copyDictionary(dict1):
    dict2 = dict1.copy()
    return dict2
print(copyDictionary(dict1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
23. Values of a dictionary

def DictValues(dict1):
    dict_values = (dict1.values())
    return dict_values
print(DictValues(dict1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
25. Dictionary items in a list of tuples

def dictionaryItems(dict1):
    dict_items = (dict1.items())
    return dict_items
print(dictionaryItems(dict1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
26. Elements at odd index positions

def oddIndexElements(list1):
    list = []
    for i in range(len(list1)):
        if i % 2 != 0:
            list.append(list1[i])
    return list
print(oddIndexElements(list1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
27. List of data types

def dataType(list1):
    type_list = []
    for i in list1:
        type_list.append(type(i))
    return type_list
print(dataType(list1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
42. Perimeter, semi-perimeter, and area of the triangle

def triangle(x,y,z):
    measures = []
    P = x + y + z
    p = 0.5 * P
    S = (p * (p - x) * (p - y) * (p - z)) ** 0.5
    measures.append(S)
    measures.append(P)
    measures.append(p)
    return measures
print(triangle(x,y,z))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
43. Compound interest

def compoundInterest(P, R, T):
    S1 = P * (1 + R/100) ** T
    S = S1 - P
    return S
print(compoundInterest(P, R, T))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
44. Difference between the area and circumference of a circle

pi = 3.14
def diffAreaCirumference(R): 
    S = pi * R ** 2 
    C = 2 * pi * R 
    difference = S - C 
    return difference 
print(diffAreaCirumference(R))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
47. Profit and loss

def Difference(A,S):
    difference = S - A
    if difference < 0:
        result = f'Loss {A - S}'
    else:
        result = f'Profit {S - A}'
    return result
print(Difference(A,S))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
49. Sum of square and square root

def sumOfSqSqroot(N):
    sum_of_squares_and_roots = N**2 + N**0.5
    return sum_of_squares_and_roots
print(sumOfSqSqroot(N))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
50. All divisors of an integer

def divisors(N):
    divisors = [1, N]
    for i in range(2, N//2 + 1):
        if N % i == 0:
            divisors.append(i)
    return sorted(divisors)
print(divisors(N))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
56. Speed of the car

def speed(K,T):
    if K / T >= 100:
        return 'Drive Slow'
    elif K / T < 100:
        return 'Good Drive'
print(speed(K,T))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
57. Validity of a triangle

def trianglevalid(A1,A2,A3):
    if A1 + A2 + A3 == 180:
        return 'Yes'
    else:
        return 'No'
print(trianglevalid(A1,A2,A3))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
58. Volume, surface area, and lateral surface area of a cylinder

pi = 3.14
def cylinder(R, H):
    result = []
    V = pi * R ** 2 * H
    S_surf_area = (2 * (pi * R ** 2)) + (2 * pi * R * H)
    result.append(S_surf_area)
    result.append(V)
    S_lat_surf_area = 2 * pi * R * H
    result.append(S_lat_surf_area)
    return result
print(cylinder(R,H))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
60. Bag of words greater than a given length

def removeWords(string1,L):
    string = string1.split()
    result = ''
    for i in string:
        if len(i) > L:
            result += i + ' '
    return result
print(removeWords(string1,L))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
61. Number of spaces in the string

def whiteSpaces(string1):
    result = string1.count(' ')
    return result
print(whiteSpaces(string1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
62. Palindrome string

def palindrome(string1):
    if string1 != string1[::-1]:
        return 'NO'
    else:
        return 'YES'
print(palindrome(string1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
64. Capitalize the first character of all the elements in a string

def capitalizeString(string1):
    return string1.title()
print(capitalizeString(string1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
66. Sort words in a string

def rearrangeString(string1):
    s = string1.strip().split(" ")
    for i in range(len(s)):
        s[i] = s[i].lower()
    result = sorted(s)
    print(' '.join(result))
rearrangeString(string1)
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
70. Check if the string is a number

def isnumeric(string1):
    try:
        float(string1)
    except ValueError:
        return 'NO'
    else:
        return 'YES'
print(isnumeric(string1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
74. Largest element in an array

def maximum_element(array):
    array = sorted(array)
    return array[-1]
print(maximum_element(array1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
75. Difference between the sum of odd and even numbers in an array

def difference(R1,R2):
    even = []
    odd = []
    for i in range(R1, R2):
        if i % 2 == 0:
            even.append(i)
        else:
            odd.append(i)
    return sum(odd) - sum(even)

print(difference(R1,R2))

OR

def difference(R1,R2):
    odd = 0
    even = 0
    for i in range(R1, R2):
        if i % 2 == 0:
            even += i
        else:
            odd += i
    dif = abs(odd-even)
    return dif
print(difference(R1,R2))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
78. Replacing the minimum element of an array with mean

def sorting_and_replacing(array):
    array = sorted(array)
    average = sum(array) / len(array)
    array[0]=average
    return array
print(sorting_and_replacing(array1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
80. Frequency of a particular number in an array

def frequency(array,index):
    count = 0
    variable = array[index]
    for i in range(len(array)):
        if array[i] == variable:
            count += 1
    return count

print(frequency(array1,index))

OR

def frequency(array,index):
    from collections import Counter
    return Counter(array)[array[index]]

print(frequency(array1,index))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
84. Remove an item from the dictionary

This solution uses slightly less memory

def removingElements(dict1,K):
    keys = []
    for key, value in dict1.items():
        if value == K:
            keys.append(key)
    for key in keys:
        dict1.pop(key)
    return dict1
print(removingElements(dict1,K))

OR

This solution is a little faster

def removingElements(dict1,K):
    for key, value in dict1.items():
        if value == K:
            del_key = str(key)
            dict1.pop(del_key)
            break
    return dict1
print(removingElements(dict1,K))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
85. Combine dictionaries by adding values of common keys

def addingCommonKeys(dict1,dict2):
    for key1, value1 in dict1.items():
        for key2, value2 in dict2.items():
            if key1 == key2:
                dict1[key1] = value1 + value2
    return dict1
print(addingCommonKeys(dict1,dict2))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
87. Sum of dictionary items

def dictSum(dict1):
    return sum(dict1.values())
print(dictSum(dict1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
88. Second maximum value in a dictionary

def secondMax(dict1):
    return (sorted(dict1.values())[-2])
print(secondMax(dict1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
89. Swap keys and values in a dictionary

def swapKeys(dict1):
    return dict(zip(dict1.values(),dict1.keys()))
print(swapKeys(dict1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
91. Add matrices

def matrix_additon(matrix1,matrix2):
    for i in range(len(matrix1)):
        for j in range(len(matrix1[0])):
            matrix1[i][j] = matrix1[i][j] + matrix2[i][j]
    return matrix1

print(matrix_additon(A,B))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
92. Matrix multiplication

def matrix_multiplication(matrix1,matrix2):
    rows_A = len(A)
    columns_A = len(A[0])
    rows_B = len(B)
    columns_B = len(B[0])
    result = [[0 for row in range(columns_B)] for column in range(rows_A)]
    for s in range(rows_A):
        for j in range(columns_B):
            for k in range(columns_A):
                result[s][j] += A[s][k] * B[k][j]
    return result
print(matrix_multiplication(A,B))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner 
96. Maximum value in the Nth column in the matrix

def max_value(matrix,N):
    return max(matrix[N] for matrix in matrix)
print(max_value(A,N))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
98. Row with the minimum sum in a matrix

def row_with_min_sum(matrix):
    sums_and_rows = []
    for row in matrix:
        sums_and_rows.append(sum(row))
    for row in matrix:
        if sum(row) == min(sums_and_rows):
            return row
print(row_with_min_sum(A))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
99. Remove the last element from each row in the matrix

def without_last_element(A):
    rows = len(A) 
    columns = len(A)
    result = [[0 for row in range(rows-1)] for column in range(columns)]
    for row in range(rows): 
        for column in range(columns-1): 
             result[row][column] = A[row][column] 
        result[row][column] = A[row][column] 
    return result
print(without_last_element(A))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
104. Loop through a tuple

def cycle(tuple1):
    for i in range(len(tuple1)):
        print(tuple1[i])
cycle(tuple1)
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
105. Loop through a tuple using the while loop

def iterating_over_values(tuple1):
    count = 0
    while count < len(tuple1):
        print(tuple1[count])
        count += 1
iterating_over_values(tuple1)
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
106. Join multiple tuples

def add(tuple1,tuple2,tuple3):
    return tuple1 + tuple2 + tuple3
print(add(tuple1,tuple2,tuple3))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
107. Update a tuple

def updation_of_tuple(tuple1,X,Y):
    tuple1 = tuple(list(tuple1) + [X])
    list_tuple1 = list(tuple1)
    list_tuple1[0] = Y
    tuple1 = tuple(list_tuple1)
    return tuple1
print(updation_of_tuple(tuple1,X,Y))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
108. Tuple of strings to a single-string

def conversion_tuple_to_string(tuple1):
    return ''.join([i for i in tuple1])

print(conversion_tuple_to_string(tuple1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
113. Element with maximum value in a list of tuples

def index_with_maxvalue(list1):
    list1 = list(list1)
    rows = len(list(list1))
    columns = len(list(list1))
    list_res = []
    for row in range(rows):
        for column in range(columns-1):
            list_res.append(list1[row][column])
    mx = 0
    for i in range(1, len(list_res), 2):
        mx = max(mx, list_res[i])
    for j in range(len(list_res)):
        if list_res[j] == mx:
            return (list_res[j-1])
print(index_with_maxvalue(list1))

OR

def index_with_maxvalue(list1):
 return sorted(list1,key=lambda x:x[1],reverse=True)[0][0]
print(index_with_maxvalue(list1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
118. Identical items in a set

def identical_elements(set1,set2):
    return (set1.intersection(set2))
print(identical_elements(set1,set2))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
119. Update a set

def unique_elements(set1,set2):
    set_union = set1.union(set2)
    set_union.difference_update(set1)
    return set_union
print(unique_elements(set1,set2))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
120. Remove items from the set

def update_set(set1,set2):
    set_union = set1 | set2
    set_union.intersection_update(set1, set2)
    return set_union
print(update_set(set1,set2))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
121. Difference between the maximum and minimum elements in a set

def difference_max_min(set1):
    return max(set1) - min(set1)
print(difference_max_min(set1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
132. Determinant of a 2x2 matrix

import numpy as np
from scipy import linalg
print(np.linalg.det(A))
---------------------------------------------------------------

---------------------------------------------------------------
133. Determinant of a 3x3 matrix
Beginner


import numpy as np
from scipy import linalg
print(np.linalg.det(A))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
137. Area of the circle

import scipy
from scipy.constants import pi

def circular_area(N):
    return (N**2/4)*pi
print(circular_area(N))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
138. Cubic root

import scipy
from scipy.special import cbrt
def root(list1):
    multiplication = 1
    for i in list1:
        if i % 2 == 0:
            multiplication *= i
    return cbrt(multiplication)
print(root(list1))
---------------------------------------------------------------

---------------------------------------------------------------
Beginner
140. Reverse a NumPy array

import numpy as np
def reverse_list(list1):
    return np.array(list1)[::-1]
print(reverse_list(list1))
---------------------------------------------------------------
















---------------------------------------------------------------
Computer Vision
912. ROC-AUC Score

from sklearn.metrics import roc_auc_score
def ROC_AUC_Score(y_true, y_pred):
    score = roc_auc_score(y_true, y_pred)
    if score > 0.7:
        return "Acceptable"
    else:
        return "Not Acceptable"
print(ROC_AUC_Score(y_true, y_pred))
---------------------------------------------------------------

---------------------------------------------------------------
Computer Vision
914. Rotate a matrix of pixels

class Rotation(object):
   def rotate_matrix(self, A):
       print("Matrix before rotation:", A)
       n = len(A)
       new_matrix = [[0] * n for _ in range(n)]
       for i in range(n):
           for j in range(n):
               new_matrix[j][n - 1 - i] = A[i][j]
       return new_matrix

rotator = Rotation()
rotated_matrix = rotator.rotate_matrix(A)
print("Matrix after rotation:", rotated_matrix)
---------------------------------------------------------------

---------------------------------------------------------------
Computer Vision
915. Minima of a function using Gradient Descent


---------------------------------------------------------------

---------------------------------------------------------------
Coumputer Vision
911. Accuracy of a Random Forest Classifier

---------------------------------------------------------------
